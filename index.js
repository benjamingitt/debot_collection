const { Account } = require("@tonclient/appkit");
const { TonClient, signerKeys } = require("@tonclient/core");
const { libNode } = require("@tonclient/lib-node");

const { DebotCollectionContract } = require("./DebotCollectionContract.js")

// Link the platform-dependable TON-SDK binary with the target Application in Typescript
// This is a Node.js project, so we link the application with `libNode` binary
// from `@tonclient/lib-node` package
// If you want to use this code on other platforms, such as Web or React-Native,
// use  `@tonclient/lib-web` and `@tonclient/lib-react-native` packages accordingly
// (see README in  https://github.com/tonlabs/ton-client-js )
TonClient.useBinaryLibrary(libNode);

/**
 *
 * @param client {TonClient}
 * @returns {Promise<void>}
 */
async function main(client) {
    // Generate an ed25519 key pair for new account
    const keys = await TonClient.default.crypto.generate_random_sign_keys();
    console.log(keys);

    const helloAcc = new Account(DebotCollectionContract, {
        signer: signerKeys(keys),
        client,
    });

    const address = await helloAcc.getAddress();
    const dabi =  "7b0a09224142492076657273696f6e223a20322c0a092276657273696f6e223a2022322e32222c0a0922686561646572223a205b227075626b6579222c202274696d65222c2022657870697265225d2c0a092266756e6374696f6e73223a205b0a09097b0a090909226e616d65223a202273657449636f6e222c0a09090922696e70757473223a205b0a090909097b226e616d65223a2269636f6e222c2274797065223a226279746573227d0a0909095d2c0a090909226f757470757473223a205b0a0909095d0a09097d2c0a09097b0a090909226e616d65223a20227374617274222c0a09090922696e70757473223a205b0a0909095d2c0a090909226f757470757473223a205b0a0909095d0a09097d2c0a09097b0a090909226e616d65223a202268616e646c654d656e7531222c0a09090922696e70757473223a205b0a090909097b226e616d65223a22696e646578222c2274797065223a2275696e743332227d0a0909095d2c0a090909226f757470757473223a205b0a0909095d0a09097d2c0a09097b0a090909226e616d65223a202268616e646c654d656e7532222c0a09090922696e70757473223a205b0a090909097b226e616d65223a22696e646578222c2274797065223a2275696e743332227d0a0909095d2c0a090909226f757470757473223a205b0a0909095d0a09097d2c0a09097b0a090909226e616d65223a20226765744465626f74496e666f222c0a090909226964223a20223078444542222c0a09090922696e70757473223a205b0a0909095d2c0a090909226f757470757473223a205b0a090909097b226e616d65223a226e616d65222c2274797065223a22737472696e67227d2c0a090909097b226e616d65223a2276657273696f6e222c2274797065223a22737472696e67227d2c0a090909097b226e616d65223a227075626c6973686572222c2274797065223a22737472696e67227d2c0a090909097b226e616d65223a2263617074696f6e222c2274797065223a22737472696e67227d2c0a090909097b226e616d65223a22617574686f72222c2274797065223a22737472696e67227d2c0a090909097b226e616d65223a22737570706f7274222c2274797065223a2261646472657373227d2c0a090909097b226e616d65223a2268656c6c6f222c2274797065223a22737472696e67227d2c0a090909097b226e616d65223a226c616e6775616765222c2274797065223a22737472696e67227d2c0a090909097b226e616d65223a2264616269222c2274797065223a22737472696e67227d2c0a090909097b226e616d65223a2269636f6e222c2274797065223a226279746573227d0a0909095d0a09097d2c0a09097b0a090909226e616d65223a20226765745265717569726564496e7465726661636573222c0a09090922696e70757473223a205b0a0909095d2c0a090909226f757470757473223a205b0a090909097b226e616d65223a22696e7465726661636573222c2274797065223a2275696e743235365b5d227d0a0909095d0a09097d2c0a09097b0a090909226e616d65223a20226765744465626f744f7074696f6e73222c0a09090922696e70757473223a205b0a0909095d2c0a090909226f757470757473223a205b0a090909097b226e616d65223a226f7074696f6e73222c2274797065223a2275696e7438227d2c0a090909097b226e616d65223a226465626f74416269222c2274797065223a22737472696e67227d2c0a090909097b226e616d65223a22746172676574416269222c2274797065223a22737472696e67227d2c0a090909097b226e616d65223a2274617267657441646472222c2274797065223a2261646472657373227d0a0909095d0a09097d2c0a09097b0a090909226e616d65223a2022736574414249222c0a09090922696e70757473223a205b0a090909097b226e616d65223a2264616269222c2274797065223a22737472696e67227d0a0909095d2c0a090909226f757470757473223a205b0a0909095d0a09097d2c0a09097b0a090909226e616d65223a2022636f6e7374727563746f72222c0a09090922696e70757473223a205b0a0909095d2c0a090909226f757470757473223a205b0a0909095d0a09097d0a095d2c0a092264617461223a205b0a095d2c0a09226576656e7473223a205b0a095d2c0a09226669656c6473223a205b0a09097b226e616d65223a225f7075626b6579222c2274797065223a2275696e74323536227d2c0a09097b226e616d65223a225f74696d657374616d70222c2274797065223a2275696e743634227d2c0a09097b226e616d65223a225f636f6e7374727563746f72466c6167222c2274797065223a22626f6f6c227d2c0a09097b226e616d65223a226d5f6f7074696f6e73222c2274797065223a2275696e7438227d2c0a09097b226e616d65223a226d5f6465626f74416269222c2274797065223a226f7074696f6e616c28737472696e6729227d2c0a09097b226e616d65223a226d5f746172676574416269222c2274797065223a226f7074696f6e616c28737472696e6729227d2c0a09097b226e616d65223a226d5f746172676574222c2274797065223a226f7074696f6e616c286164647265737329227d2c0a09097b226e616d65223a226d5f69636f6e222c2274797065223a226279746573227d0a095d0a7d0a"

    console.log(`Future address of the contract will be: ${address}`);
    console.log(`dabi: ${dabi}`);

    // Request contract deployment funds form a local TON OS SE giver
    // not suitable for other networks.
    // Deploy `hello` contract.
    await helloAcc.deploy({ useGiver: true });
    console.log(`Hello contract was deployed at address: ${address}`);

    // Call `touch` function
    let response = await helloAcc.run("setABI", {"dabi": dabi});
    console.log(`Contract run transaction with output ${response}`);

    //tondev contract run -s Test -i "dabi:$(xxd -ps -c 20000 <"helloDebot.abi.json")" "helloDebot.abi.json" setABI
    // Read local variable `timestamp` with a get method `getTimestamp`
    // This can be done with `runLocal` function. The execution of runLocal is performed off-chain and does not
    // cost any gas.
   // response = await helloAcc.runLocal("getTimestamp", {});
    //console.log("Contract reacted to your getTimestamp:", response.decoded.output)

    // Send some money to the random address
    const randomAddress = 
        "0:" + 
        Buffer.from(
            (await client.crypto.generate_random_bytes({length: 32})).bytes,
            "base64"
        ).toString("hex");
    response = await helloAcc.run("sendValue", {
        dest: randomAddress,
        amount: 100_000_000, // 0.1 token
        bounce: true,
    });
    console.log("Contract reacted to your sendValue, target address will recieve:", response.fees.total_output);
}

(async () => {
    const client = new TonClient({
        network: {
            // Local TON OS SE instance URL here
            endpoints: ["http://localhost"]
        }
    });
    try {
        console.log("Hello localhost TON!");
        await main(client);
        process.exit(0);
    } catch (error) {
        if (error.code === 504) {
            console.error(`Network is inaccessible. You have to start TON OS SE using \`tondev se start\`.\n If you run SE on another port or ip, replace http://localhost endpoint with http://localhost:port or http://ip:port in index.js file.`);
        } else {
            console.error(error);
        }
    }
    client.close();
})();